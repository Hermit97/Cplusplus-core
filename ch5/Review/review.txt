CH5 review

Name four major types of errors and briefly define each one.
-Run time errors = Errors found by checks in a running program.
-Compile time errors = errors found by the compiler.
-Logic errors = Errors found by the programmer looking for the causes of the erroneous results.
-Link time errors = Errors found by the linker when its trying to combine object files into an executable program.

What kinds of errors can we ignore in student programs?
-Can ignore link time errors.

What guarantees should every completed project offer?
-That it has minimum bugs and it does what its suppose to do.

List three approaches we can take to eliminate errors in programs and
produce acceptable software.
-Use estimations.
-Use a debugger.
-Plan your program out before writing actual code.

Why do we hate debugging?
-Its a repetitive tedious task.

What is a syntax error? Give five examples.
-Syntax error break the rules of the programming languages grammar.
-Some examples of this would be,
int x = 32 //Missing a semi Colon
double int = 33 //Using a reserved key word
int dog;
do = "Bullseye"; // do is not defined.

What is a type error? Give five examples.
-Type errors are mismatch between the types you declared.
-Arena mispelled as aren.
-Arugments for area should be one but you enter 2 arguments.
-Using the wrong type for exmaple, giveing a int type object a boolean value.
-Using undeclared function.

What is a linker error? Give three examples.
-The linker error is when a file is not declared atleast once. This is ofeten avoided by using header files.
-Functions that are not defined.
-Sometimes wrong names.
-Wrong types.

What is a logic error? Give three examples.
-Logic errors are when your code doesnt do what its suppose to.
-Instead of adding it substracts.
-Takes input but doesn't do anything with it.
-Takes decimals when it should only take whole numbers.

List four potential sources of program errors discussed in the text.
-Type error
-Linker error
-Logic Error
-Run time error

How do you know if a result is plausible? What techniques do you have to answer such questions?
-One way is by using estimations and asking your self questoins regarding the result being logically sound.

Compare and contrast having the caller of a function handle a run-time error vs. the called function’s handling the run-time error.
-The caller function has an easier time handling run time errors. Having the caller function handle run time errors can also lead to brittle code beacause if the functions details are changed in any way, it can leader to errors for the caller function. Having the called fucntion handle it is easier and unlike the caller functoin, you wont have to write test everytime the function is used. Another reason is that you only have to look at one place when modifying the code.

Why is using exceptions a better idea than returning an “error value”?
-Error values require tests for both called and caller functions. This can lead to prolematic situations like forgetting to implement the actual testing everytime.

How do you test if an input operation succeeded?
-You can test std::cin, if it suceeds then the input operation was succesful. Otherwise it failed.

Describe the process of how exceptions are thrown and caught.
-The process begins when a function finds an error it can't handle forcing it to not retrurn normally. Instead it throws an exception indicating what went wrong. Any direct or indirect caller can catch the exception. In practical terms a try-block is used to implement this. It lists the kinds of exceptions it wants to handle in the catch parts of the try-block. If no caller catches an exception, the program terminates.

Why, with a vector called v , is v[v.size()] a range error? What would be
the result of calling this?
-You would get a out of range error when compiling. The reason for this is that when testing till when you want the for loop to continue, you test it as i <= v.size(). Vectors start at the index 0. If the total number of elements in v is 10 then this will increment till it reaches the index 11 because going to increment till i is equal to v. To avoid this you would instead test it as i < v.size(). This will allow it to keep incrementing in range. Again the reason being vectors index start at 0 instead of 1. making sure it doesn't test for it being equal allows it to increment only till 10 which would be the index 9 since it begins at 0.

Define pre-condition and post-condition; give an example (that is not the area() function from this chapter), preferably a computation that requires a loop.
-Pre-condition means it has to be true for the function to perform its action correctly. Post-conditoin is the expected reuslt or actions that should occur. An example for pre-condition would be having an function that takes two integer arguments a and b. The purpose of the functoin is to take a as the starting number and print all the following numbers till b. One way of implementing post-condition is by commenting the functon requires two integer values. A should be smaller than b since it's the initial number. An example for the post-condition for this would be that the result shoudl be a set of integer numbers ranging from a to b.

When would you not test a pre-condition?
-If it slows down the code, nobody would give bad arguments, and if its too complicated to check.

When would you not test a post-condition?
-If its too complicatdd to check.

What are the steps in debugging a program?
-Compile the progra, link the program, get the program to perform what ever instructiouns its suppose to do.

Why does commenting help when debugging?
-Allows you to stay organized and easily figure out what a function might do or who wrote it or the design ideas behind it.

How does testing differ from debugging?
-When testing you are often testing the program selected inputs and comparing its results with expected results. Debugging on the other hand is going through selected steps to find the error in the code and then repeating these steps until the error is fixed.
